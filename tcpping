#!/usr/bin/env python

'''
Test network latency by creating TCP sockets and timing the 3-way handshake

compat-check: 2.6 2.7

notes: expert mode is a work in progress, but not using it shouldn't affect 
normal user mode.

This is free software, licensed under the GPL v3.
'''

__AUTHOR__ = 'Peter Downs <padowns@gmail.com>'
__VERSION__ = '0.02.01'
__DATE__ = '2016-02-26'

import signal
import sys
import os
import socket
import time
import string
import getopt
import struct

total_conns = 0
times = []

def signal_handler(signal, frame):
    '''
    used to catch ctrl-c or SIGINT when the user wants to interrupt and terminate the program
    '''
    print_statistics()
    sys.exit(0)

def checksum(msg):
    s = 0
    for i in range(0, len(msg), 2):
        w = ord(msg[i]) + (ord(msg[i+1]) << 8 )
        s = s + w
    s = (s>>16) + (s & 0xffff);
    s = s + (s >> 16);
    s = ~s & 0xffff
    return s

def stddev(list):
    '''
    Let list = a list of numbers
    Given a list with len > 0, compute the standard deviation of the data set
    '''
    if (len(list) > 0):
        from math import sqrt
        mean = float(sum(list) / len(list))
        error = [ (list[i]-mean)**2 for i in range(len(list)) ]
        return sqrt(float(sum(error)/len(error)))
    else:
        return 0

def print_statistics():
    global total_conns
    global times
    print('\n--- tcpping statistics ---')
    if (len(times) == 0):
        print('No times were recorded.')
        return 0
    print('%d connections attempted, %d complete, %d failed, %.2f%% success rate, time %f ms') % (total_conns, len(times), total_conns-len(times), float(len(times)/total_conns*100), sum(times))
    print('rtt min/avg/max/mdev = %f/%f/%f/%f ms') % (min(times), sum(times)/len(times), max(times), stddev(times))

signal.signal(signal.SIGINT, signal_handler)

def usage():
	print('tcpping version %s (c)%s %s') % (__VERSION__, __DATE__, __AUTHOR__)
	print('usage: tcpping [ -h ] [ -c <count> ] [ -r <rate> ] -d <host> -p <port> [ -x ]')
	print('')
	print('	long options:')
	print('		--help')
	print('		--dest | --destination <host>')
	print('		--port <port>')
	print('		--count <count>')
	print('		--rate <rate>')
        print('         --expert')
	print('')
	print('	host	- host or ip address to connect to')
	print('	port	- port to connect to on <host>')
	print('	count	- number of connections to try.  Default is infinite')
	print('	rate	- sleep time (in seconds) between connections.  Default is 1.')
	print('           Use a floating point number for microsecond precision (e.g. 0.200 for every 200ms)')
        print(' expert  - enable expert mode; requires root')
	print('')

def main(argv):
        global total_conns
        global times

        __EXPERT__ = False

	# Defaults
	DEST = None
	PORT = None
	COUNT = -1	# ping until interrupted
	RATE = 1	# ping every second
	
	try:
		opts, args = getopt.getopt(sys.argv[1:], "c:hd:p:r:x", ["count=", "help", "dest=", "destination=", "rate=", "port=", "expert"])
	except getopt.GetoptError:
		usage()
		sys.exit(2)
	for o, a in opts:
		if o in ("-c", "--count"):
			COUNT = a
		if o in ("-r", "--rate"):
			RATE = a
		if o in ("-d", "--dest", "--destination"):
			DEST = a
		if o in ("-p", "--port"):
			PORT = a
		if o in ("-h", "--help"):
			usage()
			sys.exit(1)
                if o in ("-x", "--expert"):
                        __EXPERT__ = True

        if (__EXPERT__ and os.geteuid() != 0):
                print('Expert mode requires root privileges.')
                sys.exit(1)

	if (DEST==None or PORT==None):
		usage()
		sys.exit(2)

        if (float(RATE) < 0.0001):
                print('Connection rate should be greater than 0.0001 sec')
                sys.exit(3)

        #port = socket.getservbyname(PORT)
        hostname = socket.gethostname()
        src_ip = socket.gethostbyname(hostname)
        dst_ip = socket.gethostbyname(DEST)

        if (__EXPERT__):
            #Initialize TCP and IP header fields
            packet=''

            ip_ihl = 5
            ip_ver = 4
            ip_tos = 0
            ip_tot_len = 0
            ip_id = 10101
            ip_frag_off = 0
            ip_ttl = 255
            ip_proto = socket.IPPROTO_TCP
            ip_check = 0
            ip_saddr = socket.inet_aton ( src_ip )
            ip_daddr = socket.inet_aton ( dst_ip )
            ip_ihl_ver = (ip_ver << 4) + ip_ihl
            ip_header = struct.pack('!BBHHHBBH4s4s' , ip_ihl_ver, ip_tos, ip_tot_len, ip_id, ip_frag_off, ip_ttl, ip_proto, ip_check, ip_saddr, ip_daddr)

            tcp_source = 1234   # source port
            tcp_dest = PORT
            tcp_seq = 454
            tcp_ack_seq = 0
            tcp_doff = 5    #4 bit field, size of tcp header, 5 * 4 = 20 bytes
            #tcp flags
            tcp_fin = 0
            tcp_syn = 1
            tcp_rst = 0
            tcp_psh = 0
            tcp_ack = 0
            tcp_urg = 0
            tcp_window = socket.htons (5840)    #   maximum allowed window size
            tcp_check = 0
            tcp_urg_ptr = 0
            tcp_offset_res = (tcp_doff << 4) + 0
            tcp_flags = tcp_fin + (tcp_syn << 1) + (tcp_rst << 2) + (tcp_psh <<3) + (tcp_ack << 4) + (tcp_urg << 5)
            tcp_header = struct.pack('!HHLLBBHHH' , tcp_source, tcp_dest, tcp_seq, tcp_ack_seq, tcp_offset_res, tcp_flags,  tcp_window, tcp_check, tcp_urg_ptr)


	while int(total_conns) != int(COUNT):
            total_conns += 1
            if(not __EXPERT__):
                DATE = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time()))

                try:
                    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                except socket.error, msg:
                    print('Unable to obtain a socket.')
                    sys.exit(4)

                try:
                        begin_time = time.time()
                        s.connect((DEST, int(PORT)))
			end_time = time.time()

                        connect_time = (end_time - begin_time) * 1000
                        if (connect_time == 0.000000):
                            RESULT = "0.000000 ms Spurious measurement discarded"
                        else:
                            times.append(connect_time)
                            RESULT = "%f ms Connection Succeeded" % (connect_time)
			
                except:
                        RESULT = 'Connection Failed'

                output = DATE + " " + DEST + ":" + str(PORT) + " (" + dst_ip + ":" + PORT + ") seq=" + str(total_conns) + " " + RESULT
                print("%s") % (output)
                time.sleep(float(RATE))

            else:
                # Open a RAW socket so IP headers can be manipulated directly
                try:
                    s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
                except socket.error, msg:
                    print('Unable to obtain a socket.')
                    print('Errno: ' + str(msg[0]) + ' Message: ' + msg[1])
                    sys.exit(4)

                packet = ''
                


        print_statistics()

if __name__ == '__main__':
        sys.exit(main(sys.argv))

